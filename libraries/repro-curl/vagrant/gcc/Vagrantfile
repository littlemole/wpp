# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = "promise-gcc"
  config.vm.define "promise-gcc"
  config.vm.provider :virtualbox do |vb|
      vb.name = "promise-gcc"
  end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 80, host: 8686
  config.vm.network "forwarded_port", guest: 9876, host: 9876
  config.vm.network "forwarded_port", guest: 8765, host: 8765

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../..", "/opt/workspace"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "UPDATE"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
     DEBIAN_FRONTEND=noninteractive apt-get update -y
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "UPGRADE"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
     DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "INSTALL"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"

     DEBIAN_FRONTEND=noninteractive apt-get -q -y --force-yes install git redis-server build-essential g++ \
          curl libcurl4-openssl-dev sqlite3 libgtest-dev cmake \
          libevent-dev pkg-config libhiredis-dev libsqlite3-dev libmagic-dev \
          valgrind sudo openssl libssl-dev joe graphite-web graphite-carbon \
          apache2 libapache2-mod-wsgi uuid-dev mysql-client libmysqlclient-dev \
          devscripts debhelper libboost-dev libboost-system-dev nghttp2 libnghttp2-dev

	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "GTEST"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"

     cd /usr/src/gtest && cmake . && make && ln -s /usr/src/gtest/libgtest.a /usr/lib/libgtest.a

	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "jsoncpp"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"

     cd /usr/local/src && git clone https://github.com/open-source-parsers/jsoncpp.git 
     cd /usr/local/src/jsoncpp && cmake  . && make && make install

	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "graphite"
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"

     graphite-manage syncdb --noinput && \ 
         sed -i 's/#SECRET_KEY/SECRET_KEY/' /etc/graphite/local_settings.py && \
         sed -i 's/#ALLOWED_HOSTS/ALLOWED_HOSTS/' /etc/graphite/local_settings.py && \
         sed -i 's/retentions = 60s:1d/retentions = 10s:1d/' /etc/carbon/storage-schemas.conf && \
         sed -i 's/CARBON_CACHE_ENABLED=false/CARBON_CACHE_ENABLED=true/' /etc/default/graphite-carbon

     chown _graphite:_graphite /var/lib/graphite/graphite.db
     cp /opt/workspace/docker/000-default.conf /etc/apache2/sites-available/000-default.conf 
 
     /etc/init.d/apache2 restart

	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"
	 echo "promise-g++ ready. "
	 echo "run 'vagrant ssh' now. "
	 echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++"

  SHELL
end
