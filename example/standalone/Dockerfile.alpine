FROM alpine:3 as build
LABEL author <little.mole@oha7.org>

RUN apk upgrade
RUN apk add sudo git joe wget g++ make \
    valgrind pkgconfig gtest mustache \
    openssl-dev libevent-dev libuuid \
    nghttp2-dev curl-dev clang clang-dev \
    libc++-dev redis boost zlib-dev \
    mariadb-dev sqlite sqlite-dev \
    expat-dev cmake nlohmann-json bash \
    util-linux-dev
    

ARG CXX=g++
ENV CXX=${CXX}

ARG EVENTLIB=
ENV BACKEND=${EVENTLIB}

# add little moles build & install helper scripts
ADD ./docker/build.sh /usr/local/bin/build.sh
ADD ./docker/install.sh /usr/local/bin/install.sh
ADD ./docker/compile.sh /usr/local/bin/compile.sh
ADD ./docker/mustache.sh /usr/local/bin/mustache.sh

ADD ./docker/utest.sh /usr/local/bin/utest.sh

RUN /usr/local/bin/utest.sh

# install little moles basic dev packages, for given compiler
RUN /usr/local/bin/install.sh cryptoneat 
RUN /usr/local/bin/install.sh diy 
RUN /usr/local/bin/install.sh patex
RUN /usr/local/bin/install.sh metacpp
 
RUN /usr/local/bin/install.sh repro

RUN /usr/local/bin/install.sh wpp

RUN mkdir -p /usr/local/src/reproweb-example
ADD . /usr/local/src/reproweb-example

# build the webapp
RUN bash -c 'cd /usr/local/src/reproweb-example && WITH_TEST=Off VERSION="${CXX}_${BACKEND}" /usr/local/bin/compile.sh reproweb-example'


# This is a comment
FROM alpine:3 

RUN apk upgrade
RUN apk add openssl libevent libuuid \
    nghttp2 curl zlib \
    sqlite  \
    expat libuuid 

#    util-linux-dev


COPY --from=build usr/local/src/reproweb-example /usr/local/src/reproweb-example


# run the webapp
CMD bash -c 'cd /usr/local/src/reproweb-example && Release/hello_standalone.bin'


